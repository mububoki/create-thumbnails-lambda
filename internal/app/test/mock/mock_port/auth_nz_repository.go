// Code generated by MockGen. DO NOT EDIT.
// Source: auth_nz_repository.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuthNZRepository is a mock of AuthNZRepository interface
type MockAuthNZRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthNZRepositoryMockRecorder
}

// MockAuthNZRepositoryMockRecorder is the mock recorder for MockAuthNZRepository
type MockAuthNZRepositoryMockRecorder struct {
	mock *MockAuthNZRepository
}

// NewMockAuthNZRepository creates a new mock instance
func NewMockAuthNZRepository(ctrl *gomock.Controller) *MockAuthNZRepository {
	mock := &MockAuthNZRepository{ctrl: ctrl}
	mock.recorder = &MockAuthNZRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthNZRepository) EXPECT() *MockAuthNZRepositoryMockRecorder {
	return m.recorder
}

// CreateRole mocks base method
func (m *MockAuthNZRepository) CreateRole(ctx context.Context, roleName string, actions []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, roleName, actions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockAuthNZRepositoryMockRecorder) CreateRole(ctx, roleName, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockAuthNZRepository)(nil).CreateRole), ctx, roleName, actions)
}
